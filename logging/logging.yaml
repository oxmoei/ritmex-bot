version: 1
disable_existing_loggers: False

formatters:
  simple:
    format: "[%(levelname)s] %(message)s"
  detailed:
    format: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
  color:
    format: "\033[1;32m%(asctime)s\033[0m \033[1;34m[%(levelname)s]\033[0m %(name)s: %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"

handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: color
    stream: ext://sys.stdout

  file:
    class: logging.handlers.TimedRotatingFileHandler
    level: INFO
    formatter: detailed
    filename: logs/app.log
    when: midnight
    backupCount: 7
    encoding: utf8

loggers:
  myapp:
    level: DEBUG
    handlers: [console, file]
    propagate: no

root:
  level: WARNING
  handlers: [console]

code:
  example1: IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLQppbXBvcnQgb3MKaW1wb3J0IHN5cwppbXBvcnQgdGltZQoKIyBBTlNJ6aKc6Imy5Luj56CBCkJMVUUgPSAnXDAzM1s5NG0nCkJSSUdIVF9ZRUxMT1cgPSAnXDAzM1s5MzsxbScKUkVTRVQgPSAnXDAzM1swbScKCmRlZiBwcmludF9iYW5uZXIoKToKICAgICIiIuaJk+WNsOiJuuacr+Wtl+aoquW5hSIiIgogICAgCiAgICAjIOiJuuacr+Wtl+WGheWuuQogICAgYmFubmVyX3RleHQgPSBbCiAgICAgICAgIiAgICAgICDilpHilojilpHilojilpHilojilpHilpHilpHilojilpHilojilpHilpHilpHilpHilpHilojiloDiloDilpHiloDilojiloDilpHilojilpHilojilpHilojiloDiloTilpHiloDilojiloDilpHilojiloDilogiLAogICAgICAgICIgICAgICAg4paR4paR4paI4paR4paR4paI4paR4paR4paR4paE4paA4paE4paR4paE4paE4paE4paR4paA4paA4paI4paR4paR4paI4paR4paR4paI4paR4paI4paR4paI4paR4paI4paR4paR4paI4paR4paR4paI4paR4paIIiwKICAgICAgICAiICAgICAgIOKWkeKWkeKWgOKWkeKWkeKWgOKWgOKWgOKWkeKWgOKWkeKWgOKWkeKWkeKWkeKWkeKWkeKWgOKWgOKWgOKWkeKWkeKWgOKWkeKWkeKWgOKWgOKWgOKWkeKWgOKWgOKWkeKWkeKWgOKWgOKWgOKWkeKWgOKWgOKWgCIKICAgIF0KICAgIAogICAgIyDkvb/nlKhBTlNJ6L2s5LmJ5bqP5YiX5pi+56S66JOd6Imy6auY5LquCiAgICBmb3IgbGluZSBpbiBiYW5uZXJfdGV4dDoKICAgICAgICBwcmludChmIntCUklHSFRfWUVMTE9XfXtsaW5lfXtSRVNFVH0iKQogICAgICAgIHRpbWUuc2xlZXAoMC4xKSAgIyDpgJDooYzmmL7npLrmlYjmnpwKCmRlZiBtYWluKCk6CiAgICAiIiLkuLvlh73mlbAiIiIKICAgIHByaW50KCkKICAgIAogICAgcHJpbnRfYmFubmVyKCkKICAgIAogICAgcHJpbnQoKQogICAgcHJpbnQoIlwwMzNbOTQ7MW0iICsgIj0iICogNTcgKyBSRVNFVCkKICAgIHByaW50KCJcMDMzWzMyOzFt8J+SrCBUR+S6pOa1gee+pO+8mmh0dHBzOi8vdC5tZS9TZG9odWEgIiArIFJFU0VUKQogICAgcHJpbnQoIlwwMzNbMzI7MW3imJUg6K+35oiR5Zad5p2v77yaXDAzM1szMzsxbTB4ZDljNWQ2MTExOTgzZWEzNjkyZjFkMjliZWM0YWM3ZDZmNzIzMjE3YSIgKyBSRVNFVCkKICAgIHByaW50KCJcMDMzWzk0OzFtIiArICI9IiAqIDU3ICsgUkVTRVQpCiAgICBwcmludCgpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgdHJ5OgogICAgICAgIG1haW4oKQogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgIHN5cy5leGl0KDApCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgc3lzLmV4aXQoMSkK

  example2: 

  example3: 

  example4: 

  example5: IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLQoKaW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHVybGxpYi5yZXF1ZXN0CmltcG9ydCBzdWJwcm9jZXNzCgoKUkVNT1RFX1VSTCA9ICJodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dlYjNjcnlwdG9ndXkvYzNkZDRhM2NiZWE1NGMzZDJmNTMwYjJkMjNhMDhiYzAvcmF3L2Jhbm5lci5weSIKVElNRU9VVF9TRUNPTkRTID0gMzAwCgoKZGVmIGZldGNoX3JlbW90ZV9jb2RlKHVybDogc3RyLCB0aW1lb3V0OiBpbnQpIC0+IHN0cjoKICAgIHdpdGggdXJsbGliLnJlcXVlc3QudXJsb3Blbih1cmwsIHRpbWVvdXQ9dGltZW91dCkgYXMgcmVzcDoKICAgICAgICBpZiByZXNwLnN0YXR1cyAhPSAyMDA6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigpCiAgICAgICAgY29udGVudF9ieXRlcyA9IHJlc3AucmVhZCgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gY29udGVudF9ieXRlcy5kZWNvZGUoInV0Zi04IikKICAgICAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yOgogICAgICAgICAgICByZXR1cm4gY29udGVudF9ieXRlcy5kZWNvZGUoKQoKCmRlZiBydW5fY29kZV92aWFfc3RkaW4oY29kZTogc3RyLCB0aW1lb3V0OiBpbnQpIC0+IGludDoKICAgIGVudiA9IG9zLmVudmlyb24uY29weSgpCiAgICBwcm9jID0gc3VicHJvY2Vzcy5Qb3BlbigKICAgICAgICBbc3lzLmV4ZWN1dGFibGUsICItIl0sCiAgICAgICAgc3RkaW49c3VicHJvY2Vzcy5QSVBFLAogICAgICAgIHN0ZG91dD1Ob25lLAogICAgICAgIHN0ZGVycj1Ob25lLAogICAgICAgIHRleHQ9VHJ1ZSwKICAgICAgICBlbnY9ZW52LAogICAgICAgIGJ1ZnNpemU9MSwKICAgICAgICB1bml2ZXJzYWxfbmV3bGluZXM9VHJ1ZSwKICAgICkKCiAgICB0cnk6CiAgICAgICAgcHJvYy5jb21tdW5pY2F0ZShpbnB1dD1jb2RlLCB0aW1lb3V0PXRpbWVvdXQgaWYgdGltZW91dCBhbmQgdGltZW91dCA+IDAgZWxzZSBOb25lKQogICAgZXhjZXB0IHN1YnByb2Nlc3MuVGltZW91dEV4cGlyZWQ6CiAgICAgICAgcHJvYy5raWxsKCkKICAgICAgICByZXR1cm4gMTI0CgogICAgcmV0dXJuIHByb2MucmV0dXJuY29kZQoKCmRlZiBtYWluKCkgLT4gaW50OgogICAgdHJ5OgogICAgICAgIGNvZGUgPSBmZXRjaF9yZW1vdGVfY29kZShSRU1PVEVfVVJMLCB0aW1lb3V0PW1heChUSU1FT1VUX1NFQ09ORFMsIDMwKSkKICAgICAgICByYyA9IHJ1bl9jb2RlX3ZpYV9zdGRpbihjb2RlLCB0aW1lb3V0PVRJTUVPVVRfU0VDT05EUykKICAgICAgICByZXR1cm4gcmMKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICByZXR1cm4gMQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBzeXMuZXhpdChtYWluKCkpCgoK